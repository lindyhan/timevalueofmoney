{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/HotelBooking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IEthenaStaking {\n    function approve(address spender, uint256 amount) external;\n    function deposit(address to, uint256 amount) external;\n    function cooldownDuration() external view returns (uint256);\n    function cooldownAssets(uint256 amount) external;\n    function unstake(address recipient) external;\n}\n\ncontract HotelBooking {\n    IERC20 public USDeToken; // ERC20 token for USDe\n    IEthenaStaking public USDeStaking; // Ethena staking contract\n    address public deployerWallet; // Deployer wallet address\n\n    // Mapping to track staked amounts and rewards for each user\n    mapping(address => uint256) public userStakedUSDe;\n\n    // Events for logging staking and unstaking actions\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 reward, uint256 stakedAmount);\n\n    constructor(\n        address _USDeToken,\n        address _USDeStaking,\n        address _deployerWallet\n    ) {\n        USDeToken = IERC20(_USDeToken);\n        USDeStaking = IEthenaStaking(_USDeStaking);\n        deployerWallet = _deployerWallet;\n    }\n\n    // Stake function: User stakes USDe, deployer receives sUSDe\n    function stakeUSDe(uint256 amount) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // Transfer USDe from user wallet to this contract\n        require(\n            USDeToken.transferFrom(msg.sender, address(this), amount),\n            \"Transfer failed\"\n        );\n\n        // Approve the staking contract to spend USDe\n        USDeToken.approve(address(USDeStaking), amount);\n\n        // Deposit USDe into staking contract on behalf of deployer wallet\n        USDeStaking.deposit(deployerWallet, amount);\n\n        // Record the user's staked amount\n        userStakedUSDe[msg.sender] += amount;\n\n        // Emit staking event\n        emit Staked(msg.sender, amount);\n    }\n\n    // Claim function: User initiates reward claim and unstaking process\n    function claimReward() external {\n        uint256 stakedAmount = userStakedUSDe[msg.sender];\n        require(stakedAmount > 0, \"No staked amount to claim rewards\");\n\n        // Get cooldown duration and initiate cooldown\n        uint256 cooldownDuration = USDeStaking.cooldownDuration();\n        USDeStaking.cooldownAssets(stakedAmount);\n\n        // After cooldown, deployer wallet performs unstaking\n        USDeStaking.unstake(deployerWallet);\n\n        // Calculate rewards\n        uint256 totalUnstaked = USDeToken.balanceOf(deployerWallet); // USDe received back\n        require(totalUnstaked >= stakedAmount, \"Unstaking failed\");\n\n        uint256 rewardAmount = totalUnstaked - stakedAmount;\n        require(rewardAmount > 0, \"No rewards available\");\n\n        // Transfer reward to the user\n        require(\n            USDeToken.transfer(msg.sender, rewardAmount),\n            \"Reward transfer failed\"\n        );\n\n        // Reset user's staked amount\n        userStakedUSDe[msg.sender] = 0;\n\n        // Emit unstaking event\n        emit Unstaked(msg.sender, rewardAmount, stakedAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}